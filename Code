from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad

def encrypt_message(key: bytes, message: str) -> bytes:
    cipher = AES.new(key, AES.MODE_CBC)
    ct_bytes = cipher.encrypt(pad(message.encode(), AES.block_size))
    iv = cipher.iv
    return iv + ct_bytes

def decrypt_message(key: bytes, encrypted_message: bytes) -> str:
    iv = encrypted_message[:AES.block_size]
    ct = encrypted_message[AES.block_size:]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    pt = unpad(cipher.decrypt(ct), AES.block_size)
    return pt.decode()

def main():     
    key = get_random_bytes(16)  # AES key must be either 16, 24, or 32 bytes long
    message = "This is a secret message!"

    encrypted_message = encrypt_message(key, message)
    print(f"Encrypted message (hex): {encrypted_message.hex()}")

    decrypted_message = decrypt_message(key, encrypted_message)
    print(f"Decrypted message: {decrypted_message}")

if __name__ == "__main__":
    main()
